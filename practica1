
import numpy as np
import matplotlib.pyplot as plt
plt.style.use('dark_background')

"""* **Creacion de una señal con ruido**"""

fm = 11250 # frecuencia de muestreo
t = np.arange(0, 3, 1/fm) # variable independiente discreta
dimension_t = len(t)
print(dimension_t)

p = 20
amplitud_ruido = 10

senial = np.interp(np.linspace(0, 20, dimension_t), np.arange(0, 20), np.random.rand(p)*30)
ruido = amplitud_ruido * np.random.rand(dimension_t)
senial_ruidosa = senial + ruido

"""* **Mostrando señales generadas:**"""

plt.subplots(1, 3, figsize=(20,4))

plt.subplot(131)
plt.plot(t, senial)
plt.grid(True)
plt.title('Señal generada')
plt.xlabel('Tiempo(s)')
plt.ylabel('Amplitud')

plt.subplot(132)
plt.plot(t, ruido)
plt.grid(True)
plt.title('Ruido normal')
plt.xlabel('Tiempo(s)')
plt.ylabel('Amplitud')

plt.subplot(133)
plt.plot(t, senial_ruidosa)
plt.grid(True)
plt.title('Señal ruidosa')
plt.xlabel('Tiempo(s)')
plt.ylabel('Amplitud')

plt.show()



"""### **2.2. Filtro media movil**

* **Estructura del filtro:**

![promedio movil.png](https://i.ibb.co/qgv7gP5/promedio-movil.png=100x20)

* **Mas referencias teóricas: **
1. [Media Movil](https://es.wikipedia.org/wiki/Media_m%C3%B3vil)
2. Consultar el libro [2] de la bibliografia del curso en la pagina 38.

* **Aplicación del filtro media movil:**
"""

k = 80
senial_filtrada = np.zeros_like(senial_ruidosa)

for i in range(k, dimension_t-k+1):
  senial_filtrada[i] = np.mean(senial_ruidosa[i-k:i+k])

tamanio_ventana = ((2 * k + 1)/fm)* 1000  # tamaño del filtro en milisegundos
print(tamanio_ventana)

plt.plot(t, senial_filtrada)
plt.show()

"""* **Gráficas de los resutados:**"""

plt.subplots(1, 3, figsize=(20,4))

plt.subplot(131)
plt.plot(t, senial_ruidosa)
plt.plot(t, senial_filtrada)
plt.grid(True)
plt.title('Señal ruidosa y Señal filtrada')
plt.xlabel('Tiempo(s)')
plt.ylabel('Amplitud')

plt.subplot(132)
plt.plot(t, senial)
plt.plot(t, senial_filtrada)
plt.grid(True)
plt.title('Ruido normal')
plt.xlabel('Tiempo(s)')
plt.ylabel('Amplitud')

plt.subplot(133)
plt.plot(t, senial)
plt.plot(t, senial_filtrada)
plt.grid(True)
plt.title('Señal ruidosa')
plt.xlabel('Tiempo(s)')
plt.ylabel('Amplitud')
plt.axis([1.8,2,16,30])

plt.show()



"""### **2.3. Filtro Gaussiano**

* **Ecuacion para creacion del filtro:**

![Ecuacion Gaussiana](https://i.ibb.co/QCJZ27n/gauss-filter.png)


* **Referencias teoricas:**
1. [Filtro Gaussiano](https://en.wikipedia.org/wiki/Gaussian_filter)

2. [FWHM](https://https://en.wikipedia.org/wiki/Full_width_at_half_maximum#:~:text=In%20a%20distribution%2C%20full%20width,half%20of%20its%20maximum%20value.&text=If%20the%20FWHM%20of%20a,be%20integrated%20by%20simple%20multiplication.)

* **Creación del filtro gaussiano:**
"""

FWHM = 25
k = 80

gauss_t = 1000 * np.arange(-k, k)/fm

filtro_gaussiano = np.exp(-4*(np.log(2)*gauss_t**2)/FWHM**2)
filtro_gaussiano_normalizado = filtro_gaussiano / np.sum(filtro_gaussiano)
plt.plot(gauss_t, filtro_gaussiano_normalizado)
plt.show()

"""* **Mostrando el filtro gaussiano construido:**"""



"""* **Aplicación del filtro Gaussiano:**"""

senial_filtrada_gauss = np.zeros_like(senial_ruidosa)

for i in range(k, dimension_t-k+1):
  senial_filtrada_gauss[i] = np.sum(senial_ruidosa[i-k:i+k] * filtro_gaussiano_normalizado)

# tamanio_ventana = ((2 * k + 1)/fm)* 1000  # tamaño del filtro en milisegundos
# print(tamanio_ventana)

plt.plot(t, senial_filtrada_gauss)
plt.show()

"""* **Mostrando los resultados:**"""

plt.subplots(1, 3, figsize=(20,4))

plt.subplot(131)
plt.plot(t, senial_ruidosa)
plt.plot(t, senial_filtrada_gauss)
plt.grid(True)
plt.title('Señal ruidosa y Señal filtrada')
plt.xlabel('Tiempo(s)')
plt.ylabel('Amplitud')

plt.subplot(132)
plt.plot(t, senial)
plt.plot(t, senial_filtrada_gauss)
plt.grid(True)
plt.title('Señal ruidosa')
plt.xlabel('Tiempo(s)')
plt.ylabel('Amplitud')

plt.subplot(133)
plt.plot(t, senial)
plt.plot(t, senial_filtrada_gauss)
plt.grid(True)
plt.title('Señal ruidosa')
plt.xlabel('Tiempo(s)')
plt.ylabel('Amplitud')
plt.axis([1.8,2,16,30])

plt.show()



plt.plot(t, senial, 'r')
plt.plot(t, senial_filtrada, 'b')
plt.plot(t, senial_filtrada_gauss, 'g')
plt.grid(True)
plt.title('Ruido normal')
plt.xlabel('Tiempo(s)')
plt.ylabel('Amplitud')
plt.axis([1.79,1.82,16,23])
plt.show()

"""## Resolución de preguntas de laboratorio"""

